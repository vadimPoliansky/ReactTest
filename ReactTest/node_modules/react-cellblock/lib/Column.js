/*
 * The Column component
 * divides Rows into fractions
 */
'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utilValidators = require('./util/validators');

var _utilConstants = require('./util/constants');

var _utilContext = require('./util/context');

var _utilContext2 = _interopRequireDefault(_utilContext);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cellblock = require('cellblock');

var _cellblock2 = _interopRequireDefault(_cellblock);

/*
 * A patch:
 * shouldComponentUpdate() can block context updates
 * so we need to add a fallback method for
 * updating interested components.
 * When React offers a better way, this should be removed
 */

var _utilHandleStaleContext = require('./util/handleStaleContext');

// apply patch

var Column = (function (_Component) {
  _inherits(Column, _Component);

  function Column() {
    _classCallCheck(this, _Column);

    _Component.apply(this, arguments);
  }

  Column.prototype.getChildContext = function getChildContext() {
    return {
      cellblockColumn: this.grid,
      cellblockBreak: this.props.breakCount || this.context.cellblockBreak
    };
  };

  Column.prototype.componentWillMount = function componentWillMount() {
    var cellblockColumn = this.context.cellblockColumn;

    if (cellblockColumn) {
      this.grid = _cellblock2['default'](cellblockColumn, this.props.width);
    } else {
      this.grid = _cellblock2['default']();
    }
  };

  Column.prototype.componentWillUpdate = function componentWillUpdate(_ref) {
    var width = _ref.width;

    this.grid.setWidth(width);
  };

  Column.prototype.componentWillUnmount = function componentWillUnmount() {
    this.grid.detach();
  };

  Column.prototype.render = function render() {
    if (this.props.isRoot) {
      return _react2['default'].createElement(
        'div',
        { className: _classnames2['default'](_utilConstants.GRID, this.props.className) },
        this.props.children
      );
    }

    var className = _classnames2['default'](_utilConstants.COL, this.props.className);
    var width = this.grid.getFraction();
    var offset = this.props.offset;

    var style = {};

    if (offset) style.marginLeft = fractionToPercent(offset);
    style.width = decimalToPercent(width[0] / width[1]);

    return _react2['default'].createElement(
      'div',
      { className: className, style: style },
      this.props.children
    );
  };

  _createClass(Column, null, [{
    key: 'propTypes',
    value: {
      breakCount: _react.PropTypes.number,
      children: _react.PropTypes.any,
      className: _react.PropTypes.string,
      isRoot: _react.PropTypes.bool,
      offset: _utilValidators.gridFraction,
      viewport: _react.PropTypes.array,
      width: _utilValidators.gridFraction
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: _utilContext2['default'],
    enumerable: true
  }, {
    key: 'childContextTypes',
    value: _utilContext2['default'],
    enumerable: true
  }]);

  var _Column = Column;
  Column = _utilHandleStaleContext.forceContext(Column) || Column;
  return Column;
})(_react.Component);

exports['default'] = Column;

function fractionToPercent(v) {
  var f = v.split('/');
  return decimalToPercent(parseInt(f[0]) / parseInt(f[1]));
}

function decimalToPercent(v) {
  return parseFloat((v * 100).toFixed(4)) + '%';
}
module.exports = exports['default'];