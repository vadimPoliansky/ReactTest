'use strict';

exports.__esModule = true;
exports.numberToPercent = numberToPercent;
exports.stringToPercent = stringToPercent;
exports.computeSpan = computeSpan;
exports.computeMinWidth = computeMinWidth;
exports.computeMaxWidth = computeMaxWidth;

var _types = require('./types');

function numberToPercent(width, parentSpan) {
  if (width >= parentSpan) return null;
  return decimalToPercent(width / parentSpan);
}

function stringToPercent(str) {
  return decimalToPercent(fractionToDecimal(str));
}

function computeSpan(rawWidth, context) {
  if (_types.isInteger(rawWidth)) {
    return smallerIntegerWidth(rawWidth, context);
  } else if (_types.isFraction(rawWidth)) {
    return context.colWidth * fractionToDecimal(rawWidth);
  } else {
    return undefined;
  }
}

function computeMinWidth(rawWidth, context) {
  var colMinPixelWidth = context.colMinPixelWidth;
  var colUnitWidth = context.colUnitWidth;

  return computeWidth(rawWidth, context, colMinPixelWidth, colUnitWidth);
}

function computeMaxWidth(rawWidth, context, maxColWidth) {
  var colMaxPixelWidth = context.colMaxPixelWidth;
  var colUnitWidth = context.colUnitWidth;

  return computeWidth(rawWidth, context, colMaxPixelWidth, maxColWidth);
}

function fractionToDecimal(v) {
  var f = v.split('/');
  return f[0] / f[1];
}

function decimalToPercent(v) {
  return parseFloat((v * 100).toFixed(4)) + '%';
}

function smallerIntegerWidth(rawWidth, context) {
  return !context.colWidth || rawWidth < context.colWidth ? rawWidth : context.colWidth;
}

function computeWidth(rawWidth, context, parentWidth, colWidth) {
  var gutterWidth = context.gutterWidth;
  var breakpoint = context.breakpoint;

  if (_types.isInteger(rawWidth)) {
    rawWidth = smallerIntegerWidth(rawWidth, context);
    return colWidth * rawWidth + gutterWidth * (rawWidth - 1);
  } else if (_types.isFraction(rawWidth)) {
    var w = rawWidth.split('/');
    var numerator = w[0];
    var denominator = w[1];
    var childColWidth = (parentWidth - (denominator - 1) * gutterWidth) / denominator;
    return numerator * childColWidth + (numerator - 1) * gutterWidth;
  } else {
    return undefined;
  }
}