/*
 * The Row component
 * Used inside Grid or Inside Column
 * Creates a place to nest Columns
 */
'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utilContext = require('./util/context');

var _utilContext2 = _interopRequireDefault(_utilContext);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utilConstants = require('./util/constants');

/*
 * A patch:
 * shouldComponentUpdate() can block context updates
 * so we need to add a fallback method for
 * updating interested components.
 * When React offers a better way, this should be removed
 */

var _utilHandleStaleContext = require('./util/handleStaleContext');

// apply patch

var Row = (function (_Component) {
  _inherits(Row, _Component);

  function Row() {
    _classCallCheck(this, _Row);

    _Component.apply(this, arguments);
  }

  Row.prototype.getChildContext = function getChildContext() {
    return {
      cellblock: true
    };
  };

  Row.prototype.render = function render() {
    var _context = this.context;
    var cellblock = _context.cellblock;
    var cellblockGet = _context.cellblockGet;
    var cellblockViewport = _context.cellblockViewport;

    var v = cellblockGet('viewport')[1];
    var c = cellblockGet('columnWidth');
    var g = cellblockGet('gutterWidth');

    var style = cellblock ? null : {
      maxWidth: v * c + v * g
    };

    return _react2['default'].createElement(
      'div',
      { className: _classnames2['default'](_utilConstants.ROW, this.props.className), style: style },
      this.props.children
    );
  };

  _createClass(Row, null, [{
    key: 'propTypes',
    value: {
      children: _react.PropTypes.any,
      className: _react.PropTypes.string
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: _utilContext2['default'],
    enumerable: true
  }, {
    key: 'childContextTypes',
    value: _utilContext2['default'],
    enumerable: true
  }]);

  var _Row = Row;
  Row = _utilHandleStaleContext.forceContext(Row) || Row;
  return Row;
})(_react.Component);

exports['default'] = Row;
module.exports = exports['default'];