{"version":3,"sources":["../src/componentWithName.js"],"names":["hasName","name","prop","propName","componentName","Array","isArray","map","item","find","Boolean","isValidElement","TypeError","type","componentWithName","componentWithNameValidator","props","isRequired","componentWithNameRequired"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuCC,aAAvC,EAAsD;AACpD,MAAIC,MAAMC,OAAN,CAAcJ,IAAd,CAAJ,EAAyB;AACvB,WAAOA,KACJK,GADI,CACA;AAAA,aAAQP,QAAQC,IAAR,EAAcO,IAAd,EAAoBL,QAApB,EAA8BC,aAA9B,CAAR;AAAA,KADA,EAEJK,IAFI,CAECC,OAFD,KAEa,IAFpB;AAGD;;AAED,MAAI,CAAC,mBAAMC,cAAN,CAAqBT,IAArB,CAAL,EAAiC;AAC/B,WAAO,IAAIU,SAAJ,QACFR,aADE,iBACeD,QADf,oCAAP;AAGD;;AAXmD,MAa5CU,IAb4C,GAanCX,IAbmC,CAa5CW,IAb4C;;AAcpD,MAAI,mCAAiBA,IAAjB,MAA2BZ,IAA/B,EAAqC;AACnC,WAAO,IAAIW,SAAJ,cACAR,aADA,iBACiBD,QADjB,gDAC6DF,IAD7D,EAAP;AAGD;;AAED,SAAO,IAAP;AACD;;AAED,SAASa,iBAAT,CAA2Bb,IAA3B,EAAiC;AAC/B,WAASc,0BAAT,CAAoCC,KAApC,EAA2Cb,QAA3C,EAAqDC,aAArD,EAAoE;AAClE,QAAMF,OAAOc,MAAMb,QAAN,CAAb;AACA,QAAIa,MAAMb,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,aAAO,IAAP;AACD;AACD,WAAOH,QAAQC,IAAR,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,aAA9B,CAAP;AACD;;AAEDW,6BAA2BE,UAA3B;AAAwC,aAASC,yBAAT,CACtCF,KADsC,EAEtCb,QAFsC,EAGtCC,aAHsC,EAItC;AACA,UAAMF,OAAOc,MAAMb,QAAN,CAAb;AACA,UAAID,QAAQ,IAAZ,EAAkB;AAChB,eAAO,IAAIU,SAAJ,cAAmBR,aAAnB,iBAAoCD,QAApC,wDAAwFF,IAAxF,EAAP;AACD;AACD,aAAOD,QAAQC,IAAR,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,aAA9B,CAAP;AACD;;AAVD,WAAiDc,yBAAjD;AAAA;;AAYA,SAAO,gCAAcH,0BAAd,gCAA+Dd,IAA/D,GAAuEA,IAAvE,CAAP;AACD;;qBAEca,iB","file":"componentWithName.js","sourcesContent":["import React from 'react';\nimport getComponentName from './helpers/getComponentName';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction hasName(name, prop, propName, componentName) {\n  if (Array.isArray(prop)) {\n    return prop\n      .map(item => hasName(name, item, propName, componentName))\n      .find(Boolean) || null;\n  }\n\n  if (!React.isValidElement(prop)) {\n    return new TypeError(\n      `${componentName}.${propName} is not a valid React element`,\n    );\n  }\n\n  const { type } = prop;\n  if (getComponentName(type) !== name) {\n    return new TypeError(\n      `\\`${componentName}.${propName}\\` only accepts components named ${name}`,\n    );\n  }\n\n  return null;\n}\n\nfunction componentWithName(name) {\n  function componentWithNameValidator(props, propName, componentName) {\n    const prop = props[propName];\n    if (props[propName] == null) {\n      return null;\n    }\n    return hasName(name, prop, propName, componentName);\n  }\n\n  componentWithNameValidator.isRequired = function componentWithNameRequired(\n    props,\n    propName,\n    componentName,\n  ) {\n    const prop = props[propName];\n    if (prop == null) {\n      return new TypeError(`\\`${componentName}.${propName}\\` requires at least one component named ${name}`);\n    }\n    return hasName(name, prop, propName, componentName);\n  };\n\n  return wrapValidator(componentWithNameValidator, `componentWithName:${name}`, name);\n}\n\nexport default componentWithName;\n"]}