{"version":3,"sources":["../src/childrenOfType.js"],"names":["onlyTypes","types","children","componentName","every","child","find","type","Type","typeNames","map","join","TypeError","isRequired","length","childrenOfType","validator","props","propName"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,aAApC,EAAmD;AACjD,MAAI,CAACD,SAASE,KAAT,CAAe;AAAA,WAASC,SAASJ,MAAMK,IAAN,CAAW;AAAA,aAAQD,MAAME,IAAN,KAAeC,IAAvB;AAAA,KAAX,CAAlB;AAAA,GAAf,CAAL,EAAgF;AAC9E,QAAMC,YAAYR,MAAMS,GAAN,gCAA4BC,IAA5B,CAAiC,OAAjC,CAAlB;AACA,WAAO,IAAIC,SAAJ,cACAT,aADA,gDACiDM,SADjD,EAAP;AAGD;AACD,SAAO,IAAP;AACD;;AAED,SAASI,UAAT,CAAoBZ,KAApB,EAA2BC,QAA3B,EAAqCC,aAArC,EAAoD;AAClD,MAAID,SAASY,MAAT,KAAoB,CAAxB,EAA2B;AACzB,QAAML,YAAYR,MAAMS,GAAN,gCAA4BC,IAA5B,CAAiC,OAAjC,CAAlB;AACA,WAAO,IAAIC,SAAJ,cAAmBT,aAAnB,qDAAyEM,SAAzE,EAAP;AACD;AACD,SAAO,IAAP;AACD;;AAED,SAASM,cAAT,GAAkC;AAAA,oCAAPd,KAAO;AAAPA,SAAO;AAAA;;AAChC,MAAIA,MAAMa,MAAN,GAAe,CAAnB,EAAsB;AACpB,UAAM,IAAIF,SAAJ,CAAc,6CAAd,CAAN;AACD;;AAED,WAASI,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCf,aAApC,EAAmD;AACjD,WAAOH,UAAUC,KAAV,EAAiB,qCAAmBgB,MAAMC,QAAN,CAAnB,CAAjB,EAAsDf,aAAtD,CAAP;AACD;;AAEDa,YAAUH,UAAV,GAAuB,UAACI,KAAD,EAAQC,QAAR,EAAkBf,aAAlB,EAAoC;AACzD,QAAMD,WAAW,qCAAmBe,MAAMC,QAAN,CAAnB,CAAjB;AACA,WAAOL,WAAWZ,KAAX,EAAkBC,QAAlB,EAA4BC,aAA5B,KAA8CH,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,CAArD;AACD,GAHD;;AAKA,SAAO,gCAAca,SAAd,EAAyB,gBAAzB,EAA2Cf,KAA3C,CAAP;AACD;;qBAEcc,c","file":"childrenOfType.js","sourcesContent":["import getComponentName from './helpers/getComponentName';\nimport renderableChildren from './helpers/renderableChildren';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction onlyTypes(types, children, componentName) {\n  if (!children.every(child => child && types.find(Type => child.type === Type))) {\n    const typeNames = types.map(getComponentName).join(', or ');\n    return new TypeError(\n      `\\`${componentName}\\` only accepts children of type ${typeNames}`,\n    );\n  }\n  return null;\n}\n\nfunction isRequired(types, children, componentName) {\n  if (children.length === 0) {\n    const typeNames = types.map(getComponentName).join(', or ');\n    return new TypeError(`\\`${componentName}\\` requires at least one node of type ${typeNames}`);\n  }\n  return null;\n}\n\nfunction childrenOfType(...types) {\n  if (types.length < 1) {\n    throw new TypeError('childrenOfType: at least 1 type is required');\n  }\n\n  function validator(props, propName, componentName) {\n    return onlyTypes(types, renderableChildren(props[propName]), componentName);\n  }\n\n  validator.isRequired = (props, propName, componentName) => {\n    const children = renderableChildren(props[propName]);\n    return isRequired(types, children, componentName) || onlyTypes(types, children, componentName);\n  };\n\n  return wrapValidator(validator, 'childrenOfType', types);\n}\n\nexport default childrenOfType;\n"]}